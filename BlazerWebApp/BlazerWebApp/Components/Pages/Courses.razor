
@page "/courses"
@using WebApp.Buisness.Models
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Courses</PageTitle>

<section class="courses">
    <div class="container">
        <div class="header">
            <h1>Courses</h1>
        </div>

        @if (courses != null)
        {

            <div class="course-items">
                @foreach (var course in courses)
                {
                    var link = $"courses/details/{course.Id}";
                    <a href="@link">
                        <div>
                            <button class="btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></button>
                            <div class="course">

                                @if (course.isBestSeller)
                                {
                                    <div class="bestseller">Best Seller</div>
                                }

                                <img src="@course.image" alt="@course.title" />

                                <div class="content">
                                    <h5 class="title">@course.title</h5>
                                    <p class="author">@course.author</p>
                                    <div class="pricing">
                                        @if (!string.IsNullOrEmpty(course.discountPrice))
                                        {
                                            <div class="discount">@course.discountPrice $</div>
                                        }
                                        <div class="price @(!string.IsNullOrEmpty(course.discountPrice)? "discount-enabled" : "")">@course.price $</div>
                                    </div>
                                    <div class="footer">
                                        <div class="hours">
                                            <i class="fa-regular fa-clock"></i> @course.hours hours
                                        </div>
                                        <div class="likes">
                                            <i class="fa-regular fa-thumbs-up"></i> @course.likesInProcent (@course.likesInNumbers)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </a>
                }
            </div>
        }




        <div class="work-with-us">
            <div class="work-with-us-text">
                <span>Ready to get started?</span>
                <span id="skills-text">Take Your<span> Skills </span>to the Next Level</span>
                <a class="btn-theme" asp-controller="Contact" asp-action="Contact">Work with us</a>
            </div>
            <img src="/images/other/woman-working-light.svg" />
        </div>
    </div>
</section>

@code {
    private List<CourseCardModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQLQuery { Query = "{getCourses {id isBestSeller title authors {author} prices {currency price discountPrice} hours likesInProcent likesInNumbers}}" };
        var response = await Http.PostAsJsonAsync("http://localhost:7131/api/graphql", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            if (result?.Data.TryGetProperty("getCourses", out var coursesElement) == true)
            {
                courses = coursesElement.EnumerateArray()
                    .Select(course => new CourseCardModel
                        {
                            Id = course.TryGetProperty("id", out var id) ? id.GetString() : null,
                            isBestSeller = course.TryGetProperty("isBestSeller", out var isBestSeller) && isBestSeller.GetBoolean(),
                            image = course.TryGetProperty("image", out var image) ? image.GetString() : null,
                            title = course.TryGetProperty("title", out var title) ? title.GetString() : null,
                            author = course.TryGetProperty("authors", out var authors) && authors.GetArrayLength() > 0
                                        ? authors[0].TryGetProperty("author", out var author) ? author.GetString() : null
                                        : null,
                            price = course.TryGetProperty("prices", out var prices) ? $"{prices.GetProperty("currency").GetString()} {prices.GetProperty("price").GetDouble()}" : null,
                            discountPrice = prices.GetProperty("discountPrice").GetDouble() > 0
                                ? $"{prices.GetProperty("currency").GetString()} {prices.GetProperty("price").GetDouble() - prices.GetProperty("discountPrice").GetDouble()}"
                                : null,
                            hours = course.TryGetProperty("hours", out var hours) ? hours.GetString() : null,
                            likesInProcent = course.TryGetProperty("likesInProcent", out var likesInProcent) ? likesInProcent.GetString() : null,
                            likesInNumbers = course.TryGetProperty("likesInNumbers", out var likesInNumbers) ? likesInNumbers.GetString() : null

                        })
                    .ToList();
            }
        }
    }
}

@attribute [StreamRendering]



@if(user == null)
{
    <p>Loading...</p>
}
else
{
    <AuthorizeView>
        <Authorized>


            <img src="/images/uploads/profiles/@user.ProfileImage" alt="@user.FirstName @user.LastName" />

            
            

             @* <EditForm id="change-img" enctype="multipart/form-data" method="post" Model="" FormName="ProfileUpload" OnValidSubmit="HandleProfileUpload">
                <input id="fileUploader" type="file" name="file" hidden />
                <label for="fileUploader" class="btn btn-circle btn-circle-sm">Change Profile Picture</label>
            </EditForm> *@


            <h5>@($"{user.FirstName} {user.LastName}")</h5>
            <p>@user.Email</p>
            <nav>
                <a><i class="fa-solid fa-gear"></i>Account Details</a>
                <a><i class="fa-regular fa-lock"></i>Account Security</a>
                <a><i class="fa-regular fa-bookmark"></i>Saved Courses</a>
                <a><i class="fa-solid fa-arrow-right-from-bracket"></i>Sign Out</a>
                <a href="/logout"><i class="fa-solid fa-arrow-right-from-bracket"></i>Logout</a>

            </nav>
        </Authorized>
    </AuthorizeView>
}


@* @code {

    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;



    protected override async Task OnInitializedAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
    }


    // public async Task HandleProfileUpload()
    // {
    //     var result = await Http.PostAsync("https://fileprovider-win23jsbackend-hansml.azurewebsites", new MultipartFormDataContent
    //     {
    //         {new StreamContent((await (await JSRuntime.InvokeAsync<IJSObjectReference("FileUpload", "fileUploader")).InvokeAsync<IJSObjectReference>("files"))[0].AsStream()), "file", "profile.jpg"}
    //     });
    // }

}   *@



@code {
    [Parameter]
    public ApplicationUser user { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    private async Task LoadUserDataAsync()
    {
        user = await UserManager.GetUserAsync(HttpContext.User) ?? null!;
    }
}
